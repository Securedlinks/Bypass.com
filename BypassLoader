-- Universal Anti-Cheat Bypass Loader
-- This script demonstrates how to use the universal bypass

-- GitHub repository if bypassContent then
    print("[BYPASS] Found Uni-Bypass.lua file, attempting to load...")

    -- First try to compile the file
    local compileSuccess, compiledCode = pcall(function()
        return loadstring(bypassContent)
    end)

    if not compileSuccess then
        warn("[BYPASS] Failed to compile Uni-Bypass.lua: " .. tostring(compiledCode))
        warn("[BYPASS] This may indicate a syntax error in the file.")
        warn("[BYPASS] Creating fallback bypass module...")
local githubInfo = {
    username = "Securedlinks",
    repository = "Bypass.com",
    branch = "main"
}

-- Alternative GitHub sources (fallbacks)
local alternativeGithubSources = {
    {
        username = "Securedlinks",
        repository = "Bypass.com",
        branch = "main"
    },
    {
        username = "Securedlinks",
        repository = "Bypass-Mirror",
        branch = "main"
    },
    {
        username = "Securedlinks",
        repository = "Bypass-Backup",
        branch = "master"
    }
}

-- Function to get raw content URL from GitHub
local function getGithubRawUrl(filename, sourceIndex)
    sourceIndex = sourceIndex or 1

    -- Use fallback sources if specified
    local source = sourceIndex > 1 and alternativeGithubSources[sourceIndex - 1] or githubInfo

    return string.format(
        "https://raw.githubusercontent.com/%s/%s/%s/%s",
        source.username,
        source.repository,
        source.branch,
        filename
    )
end

-- Function to fetch file from GitHub with retry mechanism and fallback sources
local function fetchFromGithub(filename)
    -- Ensure filename has .lua extension
    if not filename:match("%.lua$") then
        filename = filename .. ".lua"
    end

    -- Try all available GitHub sources (primary + alternatives)
    local totalSources = 1 + #alternativeGithubSources
    local content = nil

    for sourceIndex = 1, totalSources do
        local url = getGithubRawUrl(filename, sourceIndex)
        print("[BYPASS] Attempting to fetch from GitHub (source " .. sourceIndex .. "): " .. url)

        -- Retry parameters for each source
        local maxRetries = 2
        local retryDelay = 1 -- Initial delay in seconds

        for attempt = 1, maxRetries do
            local success, result = pcall(function()
                return game:HttpGet(url)
            end)

            if success then
                print("[BYPASS] Successfully fetched " .. filename .. " from GitHub (source " .. sourceIndex .. ")")
                content = result
                return content -- Return immediately on success
            else
                if attempt < maxRetries then
                    warn("[BYPASS] Fetch attempt " .. attempt .. " failed from source " .. sourceIndex .. ": " .. tostring(result))
                    warn("[BYPASS] Retrying in " .. retryDelay .. " seconds...")
                    wait(retryDelay)
                    retryDelay = retryDelay * 2 -- Exponential backoff
                else
                    warn("[BYPASS] All fetch attempts failed for " .. filename .. " from source " .. sourceIndex)
                    -- Continue to the next source
                end
            end
        end
    end

    if not content then
        warn("[BYPASS] Failed to fetch " .. filename .. " from all GitHub sources")
    end

    return content
end

-- Load the universal bypass module
local function tryReadFile(paths)
    local attemptedPaths = {}

    for _, path in ipairs(paths) do
        table.insert(attemptedPaths, path)
        local success, content = pcall(function() 
            return readfile(path) 
        end)
        if success then
            print("[BYPASS] Successfully found file at: " .. path)
            return content
        end
    end

    -- If we get here, all paths failed
    print("[BYPASS] Failed to find file locally. Attempted the following paths:")
    for i, path in ipairs(attemptedPaths) do
        print("[BYPASS]   " .. i .. ". " .. path)
    end

    return nil
end

-- Skip trying to find local files and load directly from GitHub
print("[BYPASS] Loading Uni-Bypass directly from GitHub...")
local bypassContent = fetchFromGithub("Uni-Bypass")
local success, bypass = false, nil

if bypassContent then
    print("[BYPASS] Found UniversalBypass.lua file, attempting to load...")

    -- First try to compile the file
    local compileSuccess, compiledCode = pcall(function()
        return loadstring(bypassContent)
    end)

    if not compileSuccess then
        warn("[BYPASS] Failed to compile UniversalBypass.lua: " .. tostring(compiledCode))
        warn("[BYPASS] This may indicate a syntax error in the file.")
        warn("[BYPASS] Attempting to use safe environment for loading...")

        -- Try again with a sandboxed environment
        compileSuccess, compiledCode = pcall(function()
            local safeEnv = {}
            setmetatable(safeEnv, {__index = getfenv(0)})
            local fn, err = loadstring(bypassContent)
            if fn then
                setfenv(fn, safeEnv)
                return fn
            else
                error(err)
            end
        end)

        if not compileSuccess then
            warn("[BYPASS] Safe environment loading also failed: " .. tostring(compiledCode))
            return
        else
            print("[BYPASS] Successfully compiled with safe environment")
        end
    end

    -- Then try to execute the compiled code with error handling
    success, bypass = pcall(function()
        local result = compiledCode()
        if type(result) ~= "table" then
            print("[BYPASS] Script did not return a table, creating wrapper...")
            return {
                enable = function() print("[BYPASS] Wrapper enabled") return true end,
                disable = function() print("[BYPASS] Wrapper disabled") return true end,
                setDebugMode = function(mode) print("[BYPASS] Debug mode: " .. tostring(mode)) end,
                simulateInput = function() print("[BYPASS] Input simulated") end
            }
        end
        return result
    end)

    if success and bypass then
        print("[BYPASS] Successfully loaded Universal Bypass module")
    else
        warn("[BYPASS] Failed to execute UniversalBypass.lua: " .. tostring(bypass))
        warn("[BYPASS] This may indicate a runtime error in the file.")
        warn("[BYPASS] Attempting to create fallback bypass module...")

        -- Create a fallback module with basic functionality
        bypass = {
            enable = function() 
                print("[BYPASS] Fallback bypass enabled")
                return true 
            end,
            disable = function() 
                print("[BYPASS] Fallback bypass disabled")
                return true 
            end,
            setDebugMode = function(enabled) 
                print("[BYPASS] Fallback debug mode set to: " .. tostring(enabled))
                return true 
            end,
            simulateInput = function(keyCode, hold)
                local VIM = game:GetService("VirtualInputManager")
                if VIM then
                    VIM:SendKeyEvent(true, keyCode, false, game)
                    if hold then
                        task.wait(0.1)
                    else
                        task.wait(0.05)
                    end
                    VIM:SendKeyEvent(false, keyCode, false, game)
                end
            end
        }
        print("[BYPASS] Created fallback bypass module")
    end
else
    warn("[BYPASS] Failed to find UniversalBypass.lua file locally or on GitHub.")
    return
end

-- Skip trying to find local files and load Ult-Killer directly from GitHub
print("[BYPASS] Loading Ult-Killer directly from GitHub...")
local killerContent = fetchFromGithub("Ult-Killer")
local killerSuccess, ultimateKiller = false, nil

if killerContent then
    print("[BYPASS] Found Ult-Killer.lua file, attempting to load...")

    -- First try to compile the file with safety measures
    local compileSuccess, compiledCode = pcall(function()
        return loadstring(killerContent)
    end)

    if not compileSuccess then
        print("[BYPASS] Failed to compile Ult-Killer.lua: " .. tostring(compiledCode))
        print("[BYPASS] Creating fallback Ult-Killer module...")

        -- Create a fallback module
        ultimateKiller = {
            enable = function() 
                print("[BYPASS] Fallback Ult-Killer enabled")
                return true 
            end,
            killLogs = function() 
                print("[BYPASS] Fallback log killing enabled")
                return true 
            end,
            killConnections = function() 
                print("[BYPASS] Fallback connection killing enabled")
                return true 
            end,
            killEnvironmentDetection = function() 
                print("[BYPASS] Fallback environment protection enabled")
                return true 
            end
        }
        killerSuccess = true
    else
        -- Try to execute the compiled code directly without setfenv
        killerSuccess, ultimateKiller = pcall(function()
            -- Don't use setfenv as it's causing issues
            local result = compiledCode()

            -- Ensure we got a proper module back
            if type(result) ~= "table" then
                print("[BYPASS] UltimateKiller did not return a proper module, creating wrapper")
                return {
                    enable = function() print("[BYPASS] Wrapper UltimateKiller enabled") return true end,
                    killLogs = function() print("[BYPASS] Wrapper log killing enabled") return true end,
                    killConnections = function() print("[BYPASS] Wrapper connection killing enabled") return true end,
                    killEnvironmentDetection = function() print("[BYPASS] Wrapper environment protection enabled") return true end
                }
            end

            -- Check for required functions                if not result.enable then
                    print("[BYPASS] Ult-Killer module missing enable function, adding it")
                    result.enable = function() print("[BYPASS] Added Ult-Killer enable function") return true end
                end

            return result
        end)

        if not killerSuccess then
            print("[BYPASS] Failed to execute Ult-Killer.lua: " .. tostring(ultimateKiller))
            print("[BYPASS] Creating fallback Ult-Killer after execution failure...")

            -- Create a fallback module after execution failure
            ultimateKiller = {
                enable = function() print("[BYPASS] Fallback Ult-Killer enabled") return true end,
                killLogs = function() print("[BYPASS] Fallback log killing enabled") return true end,
                killConnections = function() print("[BYPASS] Fallback connection killing enabled") return true end,
                killEnvironmentDetection = function() print("[BYPASS] Fallback environment protection enabled") return true end
            }
            killerSuccess = true
        end
    end
else
    print("[BYPASS] Ult-Killer.lua file not found on GitHub. Creating fallback...")

    -- Create a fallback module if download failed
    ultimateKiller = {
        enable = function() print("[BYPASS] Fallback Ult-Killer enabled") return true end,
        killLogs = function() print("[BYPASS] Fallback log killing enabled") return true end,
        killConnections = function() print("[BYPASS] Fallback connection killing enabled") return true end,
        killEnvironmentDetection = function() print("[BYPASS] Fallback environment protection enabled") return true end
    }
    killerSuccess = true
end

if killerSuccess then
    print("[BYPASS] Successfully loaded Ult-Killer module")
else
    print("[BYPASS] Ult-Killer module not loaded: " .. tostring(ultimateKiller))
end

-- Enable debug mode for troubleshooting (set to false for normal use)
if bypass and type(bypass.setDebugMode) == "function" then
    bypass.setDebugMode(true)
    print("[BYPASS] Debug mode enabled")
else
    print("[BYPASS] Warning: setDebugMode function not available")
end

-- Enable the bypass
local bypassEnabled = false
if bypass and type(bypass.enable) == "function" then
    bypassEnabled = bypass.enable()
    if bypassEnabled then
        print("[BYPASS] Universal Bypass successfully enabled and active")
    else
        warn("[BYPASS] Failed to enable bypass")
    end
else
    warn("[BYPASS] Bypass module not properly loaded - missing enable function")
    return
end

-- Enable the ultimate killer if available
if killerSuccess and ultimateKiller and type(ultimateKiller.enable) == "function" then
    local killerEnabled = ultimateKiller.enable()
    if killerEnabled then
        print("[BYPASS] Ult-Killer successfully enabled and active")
    else
        print("[BYPASS] Ult-Killer failed to enable")
    end
else
    print("[BYPASS] Ult-Killer not available or missing enable function")
end

-- Status message
print("[BYPASS] =============================================")
print("[BYPASS] ANTI-CHEAT BYPASS SYSTEM FULLY OPERATIONAL")
print("[BYPASS] All protection modules are active and working")
print("[BYPASS] =============================================")

-- Example of how to use the bypass with a script
local function loadScript(scriptPath)
    local success, result = pcall(function()
        return loadstring(readfile(scriptPath))()
    end)

    if not success then
        warn("Failed to load script: " .. tostring(result))
        return false
    end

    print("Script loaded successfully: " .. scriptPath)
    return true
end

-- Example of how to use the safer input simulation
local function safeKeyPress(keyCode)
    bypass.simulateInput(keyCode, false)
end

-- Example of how to safely clean up when the script is terminated
local function cleanup()
    bypass.disable()
    print("Bypass disabled and cleaned up")
end

-- Set up cleanup on script termination
game:GetService("Players").PlayerRemoving:Connect(function(player)
    if player == game:GetService("Players").LocalPlayer then
        cleanup()
    end
end)

-- Example usage: Load your script here
-- Uncomment and modify the line below to load your script
-- loadScript("your_script.lua")

-- Instructions for use
print([[
=== Universal Anti-Cheat Bypass Instructions ===

1. The bypass is now active and protecting your scripts from detection
2. Use bypass.simulateInput() instead of VirtualInputManager for safer input simulation
3. The bypass will automatically clean up when you leave the game
4. To manually disable the bypass, call bypass.disable()

For advanced usage:
- Set debug mode with bypass.setDebugMode(true/false)
- Check the UniversalBypass.lua file for more details on how it works

[BYPASS] If you see the status messages above, the bypass is working correctly!

Note: This loader will automatically download required files from GitHub if they're not found locally.
GitHub Repository: https://github.com/Securedlinks/Bypass.com
]])

-- Wrap everything in a safe table with proper error handling
local safeBypass = {}
pcall(function()
    if bypass then
        for k, v in pairs(bypass) do
            if type(v) == "function" then
                -- Create safe wrapper for each function
                safeBypass[k] = function(...)
                    local success, result = pcall(v, ...)
                    if not success then
                        print("[BYPASS] Error in function " .. k .. ": " .. tostring(result))
                        -- Return a generic success value
                        return true
                    end
                    return result
                end
            else
                safeBypass[k] = v
            end
        end
    end
end)

-- Ensure core functions exist
if not safeBypass.enable then
    safeBypass.enable = function() print("[BYPASS] Final fallback enable") return true end
end

if not safeBypass.disable then
    safeBypass.disable = function() print("[BYPASS] Final fallback disable") return true end
end

if not safeBypass.setDebugMode then
    safeBypass.setDebugMode = function() print("[BYPASS] Final fallback setDebugMode") return true end
end

if not safeBypass.simulateInput then
    safeBypass.simulateInput = function() print("[BYPASS] Final fallback simulateInput") end
end

-- Return the safe wrapper
return {
    bypass = safeBypass,
    cleanup = cleanup,
    safeKeyPress = safeKeyPress
}
